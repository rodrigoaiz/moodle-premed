services:
  # Nginx como proxy inverso principal para Moodle, Astro y SSO
  nginx:
    image: nginx:latest
    container_name: moodle-premed-nginx-1
    restart: unless-stopped
    # El Nginx dentro del contenedor escucha en el puerto 80,
    # y lo exponemos al puerto 4324 de tu máquina host.
    ports:
      - "4324:80" # Host_Port 4324:Container_Port 80
      # Si en el futuro configuras HTTPS en el puerto 4324, podrías añadir:
      # - "4324:443"
    volumes:
      # Monta tus archivos de configuración Nginx desde el host al contenedor
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf:ro
      # Monta el código fuente de Moodle para que Nginx pueda servir archivos estáticos si es necesario
      - ./moodle:/var/www/html/moodle:ro
      # Monta la carpeta de build de Astro (después de 'npm run build') para que Nginx sirva estáticos
      - ./astro-app/dist:/var/www/html/astro:ro
    # ¡IMPORTANTE! Nginx ahora espera que los servicios de los que depende estén 'healthy' o 'started'.
    depends_on:
      astro-dev:
        condition: service_started # Astro solo necesita estar iniciado
      moodle-php:
        condition: service_started # PHP-FPM solo necesita estar iniciado
      sso-backend:
        condition: service_healthy # SSO Backend debe estar 'healthy' (pasando su healthcheck)
    networks:
      - app-network

  # Servicio de desarrollo Astro
  astro-dev:
    build:
      context: ./astro-app
      dockerfile: Dockerfile.dev
    container_name: moodle-premed-astro-dev-1
    restart: unless-stopped
    # Eliminamos el mapeo de puertos directos a Astro porque Nginx lo manejará.
    # Si aún necesitas acceso directo para depuración en otro puerto no usado por el firewall, podrías añadirlo aquí.
    # Por ejemplo: - "4325:4321" (si 4325 está libre y disponible en el firewall)
    volumes:
      - ./astro-app:/app
      - /app/node_modules # Evita que los node_modules locales sobrescriban los del contenedor
    working_dir: /app
    command: npm run dev # Comando para iniciar el servidor de desarrollo de Astro
    networks:
      - app-network

  # Servicio PHP para Moodle (PHP-FPM)
  moodle-php:
    build:
      context: ./moodle
      dockerfile: Dockerfile.moodle
    container_name: moodle-premed-moodle-php-1
    restart: unless-stopped
    volumes:
      - ./moodle:/var/www/html/moodle:rw # Código fuente de Moodle
      - ./moodledata:/var/www/moodledata:rw # Directorio de datos de Moodle (Moodle necesita escribir aquí)
    env_file:
      - ./moodle/.env # Archivo con variables de entorno para Moodle (DB_HOST, DB_NAME, etc.)
    depends_on:
      - moodle-db # Moodle necesita la base de datos
      - redis     # Moodle puede usar Redis para caché
    networks:
      - app-network
    # El puerto 9000 de PHP-FPM es interno; Nginx se comunica con él directamente en la red de Docker.

  # Base de Datos para Moodle (MySQL)
  moodle-db:
    image: mysql:8.0 # O puedes usar postgres:15 si prefieres PostgreSQL
    container_name: moodle-premed-moodle-db-1
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/mysql # ¡Persistencia de datos de la DB! Crucial para no perderlos
    environment:
      MYSQL_ROOT_PASSWORD: your_strong_root_password_here # ¡CAMBIA ESTO! Es fundamental.
      MYSQL_DATABASE: moodle_db
      MYSQL_USER: moodle_user
      MYSQL_PASSWORD: your_strong_moodle_password_here # ¡CAMBIA ESTO! Es fundamental.
    networks:
      - app-network

  # Backend de SSO
  sso-backend:
    build:
      context: ./sso-backend
      dockerfile: Dockerfile
    container_name: moodle-premed-sso-backend-1
    restart: unless-stopped
    # Puerto para acceso directo al SSO Backend (útil para desarrollo/depuración)
    # Nginx también lo proxyará en /sso/
    ports:
      - "3001:3001" # Host_Port:Container_Port
    volumes:
      - ./sso-backend:/app
      - /app/node_modules # Evita que los node_modules locales sobrescriban los del contenedor
    environment:
      # Asegúrate de que Moodle tenga un cliente OAuth2 configurado con estos ID/Secret
      MOODLE_OAUTH_CLIENT_ID: "your_moodle_oauth_client_id" # ¡CAMBIA ESTO!
      MOODLE_OAUTH_CLIENT_SECRET: "your_moodle_oauth_client_secret" # ¡CAMBIA ESTO!
      MOODLE_URL: "http://moodle-php" # URL de Moodle dentro de la red Docker Compose
      # Define la URL externa de tu portal Astro para la redirección de callback de SSO
      # Esta será la IP de tu VPS + el puerto que usará el Nginx de Docker
      ASTRO_PORTAL_EXTERNAL_URL: "http://132.248.218.76:4324" # Asegúrate que coincida con tu IP real.
    networks:
      - app-network
    # --- ¡SECCIÓN HEALTHCHECK AGREGADA! ---
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s         # Chequea cada 10 segundos
      timeout: 5s           # El chequeo debe responder en 5 segundos
      retries: 20           # ¡Aumentamos los reintentos a 20!
      start_period: 45s     # ¡Aumentamos el periodo inicial a 45 segundos!
    # ------------------------------------

  # Redis para caché de Moodle
  redis:
    image: redis:latest
    container_name: moodle-premed-redis-1
    restart: unless-stopped
    networks:
      - app-network

  # MailHog para simular envío de correos en desarrollo
  mailhog:
    image: mailhog/mailhog
    container_name: moodle-premed-mailhog-1
    restart: unless-stopped
    ports:
      - "8025:8025" # Interfaz web de MailHog
    networks:
      - app-network

# Definición de redes para la comunicación interna entre servicios
networks:
  app-network:
    driver: bridge

# Definición de volúmenes persistentes para datos importantes
volumes:
  db_data:     # Para los datos de la base de datos MySQL/PostgreSQL
